#!/usr/bin/env python3
"""
GoldGPT Robust Data System - Live Demonstration
Shows the multi-source data fetching system in action
"""

import asyncio
import time
from datetime import datetime
import sys
import os

# Add current directory to path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

async def demonstrate_robust_data_system():
    """Demonstrate the robust data system capabilities"""
    print("üöÄ GoldGPT Robust Data System - Live Demonstration")
    print("=" * 60)
    print(f"‚è∞ Started: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    try:
        from robust_data_system import unified_data_provider
        print("‚úÖ Robust data system loaded successfully")
    except ImportError as e:
        print(f"‚ùå Failed to load robust data system: {e}")
        return
    
    # Test symbols
    symbols = ['XAUUSD', 'EURUSD', 'GBPUSD']
    
    print("\nüéØ DEMONSTRATION SCENARIOS")
    print("-" * 40)
    
    # Scenario 1: Price Data with Fallbacks
    print("\n1Ô∏è‚É£ Price Data Fetching (Multi-Source Fallback)")
    print("   Attempting: API ‚Üí Web Scraping ‚Üí Simulated")
    
    for symbol in symbols:
        try:
            start_time = time.time()
            price_data = await unified_data_provider.get_price_data(symbol)
            fetch_time = time.time() - start_time
            
            print(f"   üìä {symbol}: ${price_data.price:.2f}")
            print(f"      Source: {price_data.source.value}")
            print(f"      Bid/Ask: ${price_data.bid:.2f}/${price_data.ask:.2f}")
            print(f"      Change: {price_data.change:+.2f} ({price_data.change_percent:+.2f}%)")
            print(f"      Fetch Time: {fetch_time:.3f}s")
            print()
            
        except Exception as e:
            print(f"   ‚ùå {symbol}: Error - {e}")
    
    # Scenario 2: Sentiment Analysis
    print("\n2Ô∏è‚É£ Sentiment Analysis (News + NLP)")
    print("   Analyzing: News Articles ‚Üí NLP ‚Üí Confidence Scoring")
    
    for symbol in ['XAUUSD']:  # Focus on gold for demo
        try:
            start_time = time.time()
            sentiment_data = await unified_data_provider.get_sentiment_data(symbol)
            fetch_time = time.time() - start_time
            
            print(f"   üí≠ {symbol} Sentiment Analysis:")
            print(f"      Sentiment: {sentiment_data.sentiment_label.upper()}")
            print(f"      Score: {sentiment_data.sentiment_score:+.3f}")
            print(f"      Confidence: {sentiment_data.confidence:.1%}")
            print(f"      Sources: {sentiment_data.sources_count} news articles")
            print(f"      Timeframe: {sentiment_data.timeframe}")
            print(f"      Analysis Time: {fetch_time:.3f}s")
            print()
            
        except Exception as e:
            print(f"   ‚ùå {symbol}: Sentiment error - {e}")
    
    # Scenario 3: Technical Indicators
    print("\n3Ô∏è‚É£ Technical Indicators (Real-time Calculation)")
    print("   Calculating: RSI, MACD, Moving Averages, Bollinger Bands")
    
    for symbol in ['XAUUSD']:
        try:
            start_time = time.time()
            technical_data = await unified_data_provider.get_technical_data(symbol)
            fetch_time = time.time() - start_time
            
            indicators = technical_data.indicators
            
            print(f"   üìà {symbol} Technical Analysis:")
            print(f"      RSI: {indicators['rsi']['value']:.1f} ({indicators['rsi']['signal']})")
            print(f"      MACD: {indicators['macd']['value']:.4f} ({indicators['macd']['signal']})")
            print(f"      MA20: ${indicators['moving_averages']['ma20']:.2f}")
            print(f"      MA50: ${indicators['moving_averages']['ma50']:.2f}")
            print(f"      Trend: {indicators['moving_averages']['trend'].upper()}")
            print(f"      BB Upper: ${indicators['bollinger_bands']['upper']:.2f}")
            print(f"      BB Lower: ${indicators['bollinger_bands']['lower']:.2f}")
            print(f"      Source: {technical_data.source.value}")
            print(f"      Calculation Time: {fetch_time:.3f}s")
            print()
            
        except Exception as e:
            print(f"   ‚ùå {symbol}: Technical error - {e}")
    
    # Scenario 4: Comprehensive Data
    print("\n4Ô∏è‚É£ Comprehensive Data (All Types Combined)")
    print("   Fetching: Price + Sentiment + Technical (Parallel)")
    
    try:
        start_time = time.time()
        comprehensive = await unified_data_provider.get_comprehensive_data('XAUUSD')
        fetch_time = time.time() - start_time
        
        print("   üéØ XAUUSD Comprehensive Analysis:")
        
        if comprehensive['price']:
            price = comprehensive['price']
            print(f"      üí∞ Price: ${price['price']:.2f} ({price['source']})")
        
        if comprehensive['sentiment']:
            sentiment = comprehensive['sentiment']
            print(f"      üí≠ Sentiment: {sentiment['sentiment_label']} ({sentiment['confidence']:.1%})")
        
        if comprehensive['technical']:
            tech = comprehensive['technical']
            rsi = tech['indicators']['rsi']
            print(f"      üìà RSI: {rsi['value']:.1f} ({rsi['signal']})")
        
        print(f"      ‚ö° Total Time: {fetch_time:.3f}s (parallel fetch)")
        print()
        
    except Exception as e:
        print(f"   ‚ùå Comprehensive data error: {e}")
    
    # Scenario 5: Caching Demonstration
    print("\n5Ô∏è‚É£ Caching Performance (Speed Test)")
    print("   Testing: First call vs. Cached call")
    
    try:
        # First call (will cache)
        start_time = time.time()
        await unified_data_provider.get_price_data('XAUUSD')
        first_call_time = time.time() - start_time
        
        # Second call (from cache)
        start_time = time.time()
        await unified_data_provider.get_price_data('XAUUSD')
        second_call_time = time.time() - start_time
        
        print(f"   üìä Cache Performance Test:")
        print(f"      First call: {first_call_time:.3f}s (fetched and cached)")
        print(f"      Second call: {second_call_time:.3f}s (from cache)")
        print(f"      Speed improvement: {first_call_time/second_call_time:.1f}x faster")
        print(f"      Cache effective: {'‚úÖ YES' if second_call_time < first_call_time else '‚ùå NO'}")
        print()
        
    except Exception as e:
        print(f"   ‚ùå Cache test error: {e}")
    
    # Scenario 6: Provider Statistics
    print("\n6Ô∏è‚É£ System Health & Statistics")
    print("   Monitoring: Source reliability, request counts, success rates")
    
    try:
        stats = unified_data_provider.get_provider_stats()
        
        print("   üìä Provider Statistics:")
        print("      Source Reliability:")
        for source, reliability in stats['source_reliability'].items():
            print(f"        {source}: {reliability:.1%}")
        
        print("      Request Statistics:")
        for source, count in stats['request_counts'].items():
            success_count = stats['success_counts'][source]
            success_rate = (success_count / count * 100) if count > 0 else 0
            print(f"        {source}: {success_count}/{count} ({success_rate:.1f}% success)")
        
        print(f"      Cache Status: {'‚úÖ Active' if stats['cache_active'] else '‚ùå Inactive'}")
        print()
        
    except Exception as e:
        print(f"   ‚ùå Statistics error: {e}")
    
    # Final Summary
    print("\nüéØ DEMONSTRATION SUMMARY")
    print("=" * 40)
    print("‚úÖ Multi-source data fetching with automatic fallbacks")
    print("‚úÖ Real-time sentiment analysis from financial news")
    print("‚úÖ Technical indicator calculations (RSI, MACD, etc.)")
    print("‚úÖ Intelligent caching for performance optimization")
    print("‚úÖ Comprehensive error handling and graceful degradation")
    print("‚úÖ Source reliability tracking and automatic prioritization")
    print()
    print("üöÄ The GoldGPT Robust Data System is ready for production!")
    print(f"‚è∞ Completed: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    print("üé¨ Starting GoldGPT Robust Data System Demonstration...")
    asyncio.run(demonstrate_robust_data_system())
