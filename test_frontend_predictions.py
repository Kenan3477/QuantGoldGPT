#!/usr/bin/env python3
"""
FRONTEND TIMEFRAME PREDICTIONS TEST
==================================
Test the actual /api/timeframe-predictions endpoint that the frontend uses
"""

import requests
import json

def test_frontend_timeframe_predictions():
    """Test the frontend timeframe predictions API"""
    print("üß™ TESTING FRONTEND TIMEFRAME PREDICTIONS API")
    print("=" * 60)
    
    try:
        # Test the actual API endpoint the frontend calls
        url = "http://localhost:5000/api/timeframe-predictions"
        response = requests.get(url)
        
        if response.status_code == 200:
            data = response.json()
            
            print("‚úÖ API Response successful!")
            print(f"üìä Generated by: {data.get('generated_by', 'unknown')}")
            print(f"üí∞ Base price: ${data.get('base_price', 'unknown')}")
            print(f"üéØ Diversity count: {data.get('diversity_count', 'unknown')}")
            
            timeframes = data.get('timeframes', {})
            
            print("\nüìã TIMEFRAME PREDICTIONS:")
            print("-" * 40)
            
            targets = []
            changes = []
            signals = []
            
            for tf, pred in timeframes.items():
                signal = pred.get('signal', 'UNKNOWN')
                target = pred.get('target', '$0')
                change = pred.get('change', '0%')
                confidence = pred.get('confidence', '0%')
                is_real_ml = pred.get('real_ml_signal', False)
                
                status_icon = "üéØ" if is_real_ml else "‚ö†Ô∏è"
                
                print(f"   {status_icon} {tf}: {signal} - {target} ({change}) [Conf: {confidence}]")
                
                # Extract numeric values for analysis
                target_num = float(target.replace('$', '').replace(',', ''))
                change_num = float(change.replace('%', '').replace('+', ''))
                
                targets.append(target_num)
                changes.append(change_num)
                signals.append(signal)
            
            # Analysis
            print("\n" + "="*60)
            print("üìà DIVERSITY ANALYSIS")
            print("="*60)
            
            unique_targets = len(set(targets))
            unique_changes = len(set(changes))
            unique_signals = len(set(signals))
            total_timeframes = len(timeframes)
            
            print(f"üéØ Unique target prices: {unique_targets}/{total_timeframes}")
            print(f"üéØ Unique percentage changes: {unique_changes}/{total_timeframes}")
            print(f"üéØ Unique signals: {unique_signals} - {set(signals)}")
            
            if unique_targets == total_timeframes:
                print("\nüéâ PERFECT! All target prices are UNIQUE!")
                print("‚úÖ The 'identical bullshit targets' issue is FIXED!")
            elif unique_targets > total_timeframes * 0.7:
                print(f"\n‚úÖ GOOD! {unique_targets} out of {total_timeframes} targets are unique ({unique_targets/total_timeframes*100:.1f}%)")
            else:
                print(f"\n‚ùå STILL PROBLEMATIC! Only {unique_targets} out of {total_timeframes} targets are unique")
            
            # Check if all predictions are the same
            if len(set(changes)) == 1 and len(set(signals)) == 1:
                print("\n‚ùå CRITICAL: All predictions are IDENTICAL!")
                print("üîß The timeframe predictions are still using fake logic!")
            else:
                print("\n‚úÖ SUCCESS! Predictions show real diversity!")
                
        else:
            print(f"‚ùå API request failed with status code: {response.status_code}")
            print(f"Response: {response.text}")
            
    except requests.exceptions.ConnectionError:
        print("‚ùå Could not connect to localhost:5000")
        print("üîß Make sure the GoldGPT server is running!")
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")

if __name__ == "__main__":
    test_frontend_timeframe_predictions()
